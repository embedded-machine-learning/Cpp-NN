#include <cstdio>
#include <iostream>
#include <fstream>
#include <string>

#include "include/unroll_weights.hpp"


#include "weights.inc"

std::string FilePath = "./weights_unrolled.inc";

#define UNROLL_UPTO false
// #define UNROLL_UPTO true     // Enable this if you want to write all weights upto the kernel_parallel value, used for exporting to the ARM Cortex M4, to tune the performance


#if UNROLL_UPTO
#define CONDITIONAL_WRITE_MATRICES(file, index, matrix_base, batch_size, kernel_parallel) WRITE_MULTI_UNROLLED_WEIGHTS(file, matrix_base ## index , batch_size, kernel_parallel)
#else
#define CONDITIONAL_WRITE_MATRICES(file, index, matrix_base, batch_size, kernel_parallel) WRITE_MATRICES(file, matrix_base ## index , batch_size, kernel_parallel)
#endif


int main(){
    std::fstream file(FilePath, std::ios::out | std::ios::trunc);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << FilePath << std::endl;
        return 1;
    }
    file << "// This file is automatically generated by unroll_weights.cpp\n";
    file << "// Do not edit this file manually. It will be overwritten.\n\n";
    file << "#pragma once\n\n";
    file << "#include <cstddef>\n";
    file << "#include \"include/Matrix.hpp\"\n";
    file << "#include \"include/MatrixOperations.hpp\"\n\n";
    file << "#include \"include/types/Complex.hpp\"\n\n";

    // This is kinda a joke of a solution, but it works for now
    #if 0<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 0, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 0, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 0, SkipLayer, 1, S_KP); 
    #endif 
    #if 1<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 1, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 1, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 1, SkipLayer, 1, S_KP);
    #endif
    #if 2<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 2, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 2, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 2, SkipLayer, 1, S_KP);
    #endif
    #if 3<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 3, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 3, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 3, SkipLayer, 1, S_KP);
    #endif
    #if 4<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 4, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 4, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 4, SkipLayer, 1, S_KP);
    #endif
    #if 5<NUMBER_OF_LAYERS  
    CONDITIONAL_WRITE_MATRICES(file, 5, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 5, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 5, SkipLayer, 1, S_KP);
    #endif
    #if 6<NUMBER_OF_LAYERS
    CONDITIONAL_WRITE_MATRICES(file, 6, B, 1, B_KP);
    CONDITIONAL_WRITE_MATRICES(file, 6, C, 1, C_KP);
    CONDITIONAL_WRITE_MATRICES(file, 6, SkipLayer, 1, S_KP);
    #endif

    WRITE_MULTI_UNROLLED_WEIGHTS(file, W, 1, W_KP);


    file.close();
}

