#include <cstdio>
#include <iostream>
#include <fstream>
#include <string>

#include "./unroll_weights.hpp"


#include "weights.hpp"

std::string FilePath = "./weights_unrolled.hpp";

// constexpr std::size_t B_KP = 11*4;
// constexpr std::size_t C_KP = 12*8;
// constexpr std::size_t S_KP = 14*8;


int main(){
    std::fstream file(FilePath, std::ios::out | std::ios::trunc);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << FilePath << std::endl;
        return 1;
    }
    file << "// This file is automatically generated by unroll_weights.cpp\n";
    file << "// Do not edit this file manually. It will be overwritten.\n\n";
    file << "#pragma once\n\n";
    file << "#include <cstddef>\n";
    file << "#include <complex>\n";
    file << "#include \"./Matrix.hpp\"\n";
    file << "#include \"./MatrixOperations.hpp\"\n\n";
    file << "#include \"./types/Complex.hpp\"\n\n";

    WRITE_MATRICES(file, B0, 1, B_KP);
    WRITE_MATRICES(file, B1, 1, B_KP);
    WRITE_MATRICES(file, B2, 1, B_KP);
    WRITE_MATRICES(file, B3, 1, B_KP);

    WRITE_MATRICES(file, C0, 1, C_KP);
    WRITE_MATRICES(file, C1, 1, C_KP);
    WRITE_MATRICES(file, C2, 1, C_KP);
    WRITE_MATRICES(file, C3, 1, C_KP);

    // WRITE_MATRICES(file, SkipLayer0_weights, 1, S_KP); // doe snot exist
    WRITE_MATRICES(file, SkipLayer1_weights, 1, S_KP);
    WRITE_MATRICES(file, SkipLayer2_weights, 1, S_KP);
    WRITE_MATRICES(file, SkipLayer3_weights, 1, S_KP);

    WRITE_MATRICES(file, Decoder_weights, 1, 1);



    file.close();
}

